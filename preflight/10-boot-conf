#!/usr/bin/env bash

set -e
set -x

# If this is a derived (baked) image, skip all of this logic.
if [ -f /baked ]; then
  exit 0
fi

# Read environment variables and validate configuration
if [ "$MYSQL_LINKED_CONTAINER" != "" ]; then
  MYSQL_HOST_VARIABLE="${MYSQL_LINKED_CONTAINER}_PORT_3306_TCP_ADDR"
  MYSQL_HOST="${!MYSQL_HOST_VARIABLE}"
  MYSQL_PORT_VARIABLE="${MYSQL_LINKED_CONTAINER}_PORT_3306_TCP_PORT"
  MYSQL_PORT="${!MYSQL_PORT_VARIABLE}"
  unset MYSQL_HOST_VARIABLE
  unset MYSQL_PORT_VARIABLE
fi

if [ "$MYSQL_STORAGE_NAMESPACE" == "" ]; then
  MYSQL_STORAGE_NAMESPACE=phorge
fi

if [ "${MYSQL_PORT:0:6}" == "tcp://" ]; then
  echo "Error: MYSQL_PORT environment variable has been set based on a container link called mysql.  This places an invalid value inside MYSQL_PORT, which causes Phorge startup to fail later on.  When using a linked container called mysql, you should explicitly set MYSQL_PORT=3306 to ensure it has a valid value."
  exit 1
fi

if [ "$SSL_TYPE" == "" ]; then
  SSL_TYPE=none
fi

if [ "$PHORGE_VCS_USER" == "" ]; then
  PHORGE_VCS_USER=git
fi

if [ "$PHORGE_STORAGE_TYPE" == "" ]; then
  PHORGE_STORAGE_TYPE=mysql
fi

if [ "$OVERRIDE_PHORGE_URI" != "" ] ||
   [ "$OVERRIDE_PHORGE_BRANCH" != "" ] ||
   [ "$OVERRIDE_ARCANIST_URI" != "" ] ||
   [ "$OVERRIDE_ARCANIST_BRANCH" != "" ]; then
  ENABLE_UPDATE_ON_START=true
fi

if [ -f /config/script.pre ]; then
  SCRIPT_BEFORE_UPDATE=/config/script.pre
fi

if [ -f /config/script.premig ]; then
  SCRIPT_BEFORE_MIGRATION=/config/script.premig
fi

if [ -f /config/script.post ]; then
  SCRIPT_AFTER_MIGRATION=/config/script.post
fi

if [ -f /config/script.phd ]; then
  SCRIPT_AFTER_DAEMONS=/config/script.phd
fi

if [ -d /config/keycache ]; then
  PHORGE_HOST_KEYS_PATH="/config/keycache"
fi

set +x
cat >/config.saved <<EOF
OVERRIDE_PHORGE_URI="$OVERRIDE_PHORGE_URI"
OVERRIDE_PHORGE_BRANCH="$OVERRIDE_PHORGE_BRANCH"
OVERRIDE_ARCANIST_URI="$OVERRIDE_ARCANIST_URI"
OVERRIDE_ARCANIST_BRANCH="$OVERRIDE_ARCANIST_BRANCH"
PHORGE_HOST="$PHORGE_HOST"
PHORGE_CDN="$PHORGE_CDN"
PHORGE_REPOSITORY_PATH="$PHORGE_REPOSITORY_PATH"
PHORGE_STORAGE_TYPE="$PHORGE_STORAGE_TYPE"
PHORGE_STORAGE_PATH="$PHORGE_STORAGE_PATH"
PHORGE_STORAGE_BUCKET="$PHORGE_STORAGE_BUCKET"
PHORGE_VCS_USER="$PHORGE_VCS_USER"
PHORGE_VCS_PORT="$PHORGE_VCS_PORT"
PHORGE_HOST_KEYS_PATH="$PHORGE_HOST_KEYS_PATH"
AWS_S3_ACCESS_KEY="$AWS_S3_ACCESS_KEY"
AWS_S3_SECRET_KEY="$AWS_S3_SECRET_KEY"
MYSQL_HOST="$MYSQL_HOST"
MYSQL_PORT="$MYSQL_PORT"
MYSQL_USER="$MYSQL_USER"
set +x
MYSQL_PASS="$MYSQL_PASS"
set -x
MYSQL_STORAGE_NAMESPACE="$MYSQL_STORAGE_NAMESPACE"
ENABLE_APCU="$ENABLE_APCU"
ENABLE_UPDATE_ON_START="$ENABLE_UPDATE_ON_START"
SSL_TYPE="$SSL_TYPE"
SCRIPT_BEFORE_UPDATE="$SCRIPT_BEFORE_UPDATE"
SCRIPT_BEFORE_MIGRATION="$SCRIPT_BEFORE_MIGRATION"
SCRIPT_AFTER_MIGRATION="$SCRIPT_AFTER_MIGRATION"
SCRIPT_AFTER_LETS_ENCRYPT="$SCRIPT_AFTER_LETS_ENCRYPT"
SCRIPT_BEFORE_DAEMONS="$SCRIPT_BEFORE_DAEMONS"
SCRIPT_AFTER_DAEMONS="$SCRIPT_AFTER_DAEMONS"
DISABLE_IOMONITOR="$DISABLE_IOMONITOR"
EOF
set -x

# Reload configuration
source /config.saved

# Update the PHORGE_VCS_USER in config files
sed -i "s/PHORGE/$PHORGE_VCS_USER/g" /etc/passwd
sed "s/__PHORGE_VCS_USER__/$PHORGE_VCS_USER/g" /etc/phorge-ssh/sshd_config.phorge.template > /etc/phorge-ssh/sshd_config.phorge
sed "s/__PHORGE_VCS_USER__/$PHORGE_VCS_USER/g" /etc/phorge-ssh/phorge-ssh-hook.sh.template > /etc/phorge-ssh/phorge-ssh-hook.sh

# TODO: probably don't hardcode the major/minor version...
sed "s/__PHORGE_VCS_USER__/$PHORGE_VCS_USER/g" /etc/php/8.3/fpm/php-fpm.conf.template > /etc/php/8.3/fpm/php-fpm.conf
chmod 755 /etc/phorge-ssh/phorge-ssh-hook.sh

# Set up Phorge
if [ "$SCRIPT_BEFORE_UPDATE" != "" ]; then
  pushd /srv/phorge/phorge
  $SCRIPT_BEFORE_UPDATE
  popd
fi

if [ "$ENABLE_UPDATE_ON_START" == "true" ]; then
  pushd /srv/phorge/arcanist
  if [ "$OVERRIDE_ARCANIST_URI" != "" ]; then
    sudo -u "$PHORGE_VCS_USER" git remote set-url origin $OVERRIDE_ARCANIST_URI
  fi
  sudo -u "$PHORGE_VCS_USER" git fetch --all
  if [ "$OVERRIDE_ARCANIST_BRANCH" != "" ]; then
    sudo -u "$PHORGE_VCS_USER" git checkout $OVERRIDE_ARCANIST_BRANCH
  else
    sudo -u "$PHORGE_VCS_USER" git pull
  fi
  popd

  pushd /srv/phorge/phorge
  if [ "$OVERRIDE_PHORGE_URI" != "" ]; then
    sudo -u "$PHORGE_VCS_USER" git remote set-url origin $OVERRIDE_PHORGE_URI
  fi
  sudo -u "$PHORGE_VCS_USER" git fetch --all
  if [ "$OVERRIDE_PHORGE_BRANCH" != "" ]; then
    sudo -u "$PHORGE_VCS_USER" git checkout $OVERRIDE_PHORGE_BRANCH
  else
    sudo -u "$PHORGE_VCS_USER" git pull
  fi
  popd
fi

pushd /srv/phorge/phorge
if [ "$MYSQL_HOST" != "" ]; then
  sudo -u "$PHORGE_VCS_USER" ./bin/config set mysql.host "$MYSQL_HOST"
fi
if [ "$MYSQL_PORT" != "" ]; then
  sudo -u "$PHORGE_VCS_USER" ./bin/config set mysql.port "$MYSQL_PORT"
fi
if [ "$MYSQL_USER" != "" ]; then
  sudo -u "$PHORGE_VCS_USER" ./bin/config set mysql.user "$MYSQL_USER"
fi
set +x
if [ "$MYSQL_PASS" != "" ]; then
  sudo -u "$PHORGE_VCS_USER" ./bin/config set mysql.pass "$MYSQL_PASS"
fi
set -x
if [ "$MYSQL_STORAGE_NAMESPACE" != "" ]; then
  sudo -u "$PHORGE_VCS_USER" ./bin/config set storage.default-namespace "$MYSQL_STORAGE_NAMESPACE"
fi
if [ "$PHORGE_HOST" != "" ]; then
  if [ "$SSL_TYPE" == "none" ]; then
    sudo -u "$PHORGE_VCS_USER" ./bin/config set phabricator.base-uri "http://$PHORGE_HOST/"
  else
    sudo -u "$PHORGE_VCS_USER" ./bin/config set phabricator.base-uri "https://$PHORGE_HOST/"
  fi
fi
if [ "$PHORGE_CDN" != "" ]; then
  if [ "$SSL_TYPE" == "none" ]; then
    sudo -u "$PHORGE_VCS_USER" ./bin/config set security.alternate-file-domain "http://$PHORGE_CDN/"
  else
    sudo -u "$PHORGE_VCS_USER" ./bin/config set security.alternate-file-domain "https://$PHORGE_CDN/"
  fi
fi
if [ "$PHORGE_VCS_PORT" != "" ]; then
    sudo -u "$PHORGE_VCS_USER" ./bin/config set diffusion.ssh-port "$PHORGE_VCS_PORT"
fi
sudo -u "$PHORGE_VCS_USER" ./bin/config set phd.user "$PHORGE_VCS_USER"
sudo -u "$PHORGE_VCS_USER" ./bin/config set diffusion.ssh-user "$PHORGE_VCS_USER"
sudo -u "$PHORGE_VCS_USER" ./bin/config set pygments.enabled true
if [ "$PHORGE_REPOSITORY_PATH" != "" ]; then
  sudo -u "$PHORGE_VCS_USER" ./bin/config set repository.default-local-path "$PHORGE_REPOSITORY_PATH"
fi
if [ "$PHORGE_STORAGE_TYPE" == "mysql" ]; then
  sudo -u "$PHORGE_VCS_USER" ./bin/config set storage.mysql-engine.max-size 67108864
fi
if [ "$PHORGE_STORAGE_TYPE" == "disk" ]; then
  sudo -u "$PHORGE_VCS_USER" ./bin/config set storage.mysql-engine.max-size 0
  sudo -u "$PHORGE_VCS_USER" ./bin/config set storage.local-disk.path "$PHORGE_STORAGE_PATH"
fi
if [ "$PHORGE_STORAGE_TYPE" == "s3" ]; then
  sudo -u "$PHORGE_VCS_USER" ./bin/config set storage.mysql-engine.max-size 0
  sudo -u "$PHORGE_VCS_USER" ./bin/config set storage.s3.bucket "$PHORGE_STORAGE_BUCKET"
fi
if [ "$AWS_S3_ACCESS_KEY" != "" ]; then
  sudo -u "$PHORGE_VCS_USER" ./bin/config set amazon-s3.access-key "$AWS_S3_ACCESS_KEY"
fi
if [ "$AWS_S3_SECRET_KEY" != "" ]; then
  sudo -u "$PHORGE_VCS_USER" ./bin/config set amazon-s3.secret-key "$AWS_S3_SECRET_KEY"
fi
if [ "$AWS_S3_REGION" != "" ]; then
  sudo -u "$PHORGE_VCS_USER" ./bin/config set amazon-s3.region "$AWS_S3_REGION"
fi
if [ "$AWS_S3_ENDPOINT" != "" ]; then
  sudo -u "$PHORGE_VCS_USER" ./bin/config set amazon-s3.endpoint "$AWS_S3_ENDPOINT"
fi
if [ "$SSL_TYPE" == "none" ]; then
  APHLICT_PROTOCOL="http"
  APHLICT_PORT=80
else
  APHLICT_PROTOCOL="https"
  APHLICT_PORT=443
fi
sudo -u "$PHORGE_VCS_USER" ./bin/config set notification.servers '[{"type": "client","host": "'$PHORGE_HOST'","port": '$APHLICT_PORT',"protocol": "'$APHLICT_PROTOCOL'","path": "/ws/"},{"type": "admin","host": "127.0.0.1","port": 22281,"protocol": "http"}]'
unset APHLICT_PROTOCOL
unset APHLICT_PORT
popd

if [ "$ENABLE_APCU" == "true" ]; then
  cat >/etc/php/8.3/conf.d/apcu.ini <<EOF
extension=apcu.so
EOF
fi

if [ "$SSL_TYPE" == "external" ]; then
  sudo -u $PHORGE_VCS_USER cat << 'EOF' >/srv/phorge/phorge/support/preamble.php
<?php

$_SERVER['HTTPS'] = true;
EOF
fi

if [ "$SCRIPT_BEFORE_MIGRATION" != "" ]; then
  pushd /srv/phorge/phorge
  $SCRIPT_BEFORE_MIGRATION
  popd
fi

# The search database may need to be repaired, and if so, will prevent bin/storage upgrade from working
# so preemptively run a repair on that database now.
set +x
mysqlcheck --host="$MYSQL_HOST" --port="$MYSQL_PORT" --user="$MYSQL_USER" --password="$MYSQL_PASS" --databases "${MYSQL_STORAGE_NAMESPACE}_search" || true
set -x

/srv/phorge/phorge/bin/storage upgrade --force

if [ "$SCRIPT_AFTER_MIGRATION" != "" ]; then
  pushd /srv/phorge/phorge
  $SCRIPT_AFTER_MIGRATION
  popd
fi

